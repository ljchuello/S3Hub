/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiRepoListObjectsV2Post } from '../fn/repo/api-repo-list-objects-v-2-post';
import { ApiRepoListObjectsV2Post$Params } from '../fn/repo/api-repo-list-objects-v-2-post';
import { apiRepoPreSignedUrlPost } from '../fn/repo/api-repo-pre-signed-url-post';
import { ApiRepoPreSignedUrlPost$Params } from '../fn/repo/api-repo-pre-signed-url-post';
import { OFile } from '../models/o-file';

@Injectable({ providedIn: 'root' })
export class RepoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiRepoListObjectsV2Post()` */
  static readonly ApiRepoListObjectsV2PostPath = '/api/Repo/ListObjectsV2';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRepoListObjectsV2Post()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRepoListObjectsV2Post$Response(params: ApiRepoListObjectsV2Post$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OFile>>> {
    return apiRepoListObjectsV2Post(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRepoListObjectsV2Post$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRepoListObjectsV2Post(params: ApiRepoListObjectsV2Post$Params, context?: HttpContext): Observable<Array<OFile>> {
    return this.apiRepoListObjectsV2Post$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OFile>>): Array<OFile> => r.body)
    );
  }

  /** Path part for operation `apiRepoPreSignedUrlPost()` */
  static readonly ApiRepoPreSignedUrlPostPath = '/api/Repo/PreSignedUrl';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRepoPreSignedUrlPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRepoPreSignedUrlPost$Response(params: ApiRepoPreSignedUrlPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiRepoPreSignedUrlPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRepoPreSignedUrlPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiRepoPreSignedUrlPost(params: ApiRepoPreSignedUrlPost$Params, context?: HttpContext): Observable<string> {
    return this.apiRepoPreSignedUrlPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
